name: online-theatre-tests

services:
  tests:
    build:
      context: ./tests
    depends_on:
      movies:
        condition: service_healthy
      auth-service:
        condition: service_healthy
      notifications-queue-service:
        condition: service_healthy
      notification-service:
        condition: service_healthy
      notification-admin-panel-service:
        condition: service_healthy
    networks:
      - movies-network
    environment:
      - MOVIES_URL=http://movies:8000
      - AUTH_SERVICE_URL=http://auth-service:8000
      - UGC_URL=http://ugc-mongo-service:5002
      - NOTIFICATION_SERVICE_URL=http://notification-service:8000
      - AUTH_POSTGRESQL_HOST=auth-postgresql
      - AUTH_POSTGRESQL_PASSWORD=$AUTH_POSTGRESQL_PASSWORD
      - AUTH_REDIS_HOST=auth-redis
      - AUTH_REDIS_PORT=6379
      - AUTH_SUPERUSER_LOGIN=$AUTH_SUPERUSER_LOGIN
      - AUTH_SUPERUSER_PASSWORD=$AUTH_SUPERUSER_PASSWORD
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - ELASTIC_HOST=elasticsearch
      - ELASTIC_PORT=9200
      - RATELIMITER_TIMES=$RATELIMITER_TIMES
      - RATELIMITER_SECONDS=$RATELIMITER_SECONDS
      - MONGO_HOST=mongodb
      - MONGO_PORT=27017
      - MONGO_DB=ugc_mongo
    develop:
      watch:
        - action: sync
          path: ./tests/tests
          target: /opt/app/tests
        - action: rebuild
          path: ./tests/commands
        - action: rebuild
          path: ./tests/pyproject.toml
        - action: rebuild
          path: ./tests/poetry.lock

  movies:
    build:
      context: ./src
      args:
        - PYTHON_VERSION
    depends_on:
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      auth-service:
        condition: service_healthy
    networks:
      - movies-network
    environment:
      - PROJECT_NAME=$PROJECT_NAME
      - FASTAPI_WORKERS=${FASTAPI_WORKERS:-}
      - AUTH_HOST=auth-service
      - AUTH_PORT=8000
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_CACHE_EXPIRE_IN_SECONDS=3600
      - ELASTIC_HOST=elasticsearch
      - ELASTIC_PORT=9200
    healthcheck:
      test: [ 'CMD-SHELL', 'curl -s http://localhost:8000/api/_health' ]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 10s
    develop:
      watch:
        - action: sync+restart
          path: ./src/movies
          target: /opt/app/movies
        - action: rebuild
          path: ./src/commands
        - action: rebuild
          path: ./src/pyproject.toml
        - action: rebuild
          path: ./src/poetry.lock

  redis:
    image: 'bitnami/redis:7.4.2-debian-12-r0'
    networks:
      - movies-network
    volumes:
      - 'redis-data:/bitnami/redis/data'
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
    command: [ '/opt/bitnami/scripts/redis/run.sh', '--maxmemory', '${REDIS_MAXMEMORY:-200mb}' ]
    healthcheck:
      test: [ 'CMD', '/bin/bash', '-c', '[[ $(redis-cli ping) == "PONG" ]]' ]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 10s

  elasticsearch:
    image: 'bitnami/elasticsearch:8.16.1-debian-12-r1'
    networks:
      - movies-network
    volumes:
      - 'elasticsearch-data:/bitnami/elasticsearch/data'
    environment:
      - ELASTICSEARCH_HEAP_SIZE=${ELASTICSEARCH_HEAP_SIZE:-200m}
    healthcheck:
      test: [ 'CMD-SHELL', '/opt/bitnami/scripts/elasticsearch/healthcheck.sh' ]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s

  auth-service:
    build:
      context: ./compose/auth
      args:
        - PYTHON_VERSION
    depends_on:
      auth-postgresql:
        condition: service_healthy
      auth-redis:
        condition: service_healthy
      auth-service-init:
        condition: service_completed_successfully
    networks:
      - movies-network
    environment:
      - FASTAPI_WORKERS=${AUTH_FASTAPI_WORKERS:-}
      - AUTH_TEST_MODE=True
      - AUTH_SECRET_KEY=$AUTH_SECRET_KEY
      - AUTH_ACCESS_JWT_LIFETIME=${AUTH_ACCESS_JWT_LIFETIME:-3600}
      - AUTH_REFRESH_JWT_LIFETIME=${AUTH_REFRESH_JWT_LIFETIME:-86400}
      - AUTH_SQL_ECHO=${AUTH_SQL_ECHO:-False}
      - SUPERUSER_LOGIN=$AUTH_SUPERUSER_LOGIN
      - SUPERUSER_PASSWORD=$AUTH_SUPERUSER_PASSWORD
      - POSTGRESQL_HOST=auth-postgresql
      - POSTGRESQL_PORT=5432
      - POSTGRESQL_DATABASE=$AUTH_POSTGRESQL_DATABASE
      - POSTGRESQL_USERNAME=$AUTH_POSTGRESQL_USERNAME
      - POSTGRESQL_PASSWORD=$AUTH_POSTGRESQL_PASSWORD
      - RATELIMITER_TIMES=$RATELIMITER_TIMES
      - RATELIMITER_SECONDS=$RATELIMITER_SECONDS
      - REDIS_HOST=auth-redis
      - REDIS_PORT=6379
    healthcheck:
      test: [ 'CMD-SHELL', 'curl -s http://localhost:8000/auth/api/_health' ]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 10s
    develop:
      watch:
        - action: sync+restart
          path: ./compose/auth/auth
          target: /opt/app/auth
        - action: sync+restart
          path: ./compose/auth/scripts
          target: /opt/app/scripts
        - action: rebuild
          path: ./compose/auth/commands
        - action: rebuild
          path: ./compose/auth/pyproject.toml
        - action: rebuild
          path: ./compose/auth/poetry.lock

  auth-service-init:
    build:
      context: ./compose/auth
      args:
        - PYTHON_VERSION
    depends_on:
      auth-postgresql:
        condition: service_healthy
      auth-redis:
        condition: service_healthy
    networks:
      - movies-network
    environment:
      - AUTH_SECRET_KEY=$AUTH_SECRET_KEY
      - AUTH_ACCESS_JWT_LIFETIME=${AUTH_ACCESS_JWT_LIFETIME:-3600}
      - AUTH_REFRESH_JWT_LIFETIME=${AUTH_REFRESH_JWT_LIFETIME:-86400}
      - SUPERUSER_LOGIN=$AUTH_SUPERUSER_LOGIN
      - SUPERUSER_PASSWORD=$AUTH_SUPERUSER_PASSWORD
      - POSTGRESQL_HOST=auth-postgresql
      - POSTGRESQL_PORT=5432
      - POSTGRESQL_DATABASE=$AUTH_POSTGRESQL_DATABASE
      - POSTGRESQL_USERNAME=$AUTH_POSTGRESQL_USERNAME
      - POSTGRESQL_PASSWORD=$AUTH_POSTGRESQL_PASSWORD
      - REDIS_HOST=auth-redis
      - REDIS_PORT=6379
    command: [ '/opt/app/commands/init.sh' ]

  auth-postgresql:
    image: 'bitnami/postgresql:17.2.0-debian-12-r5'
    networks:
      - movies-network
    volumes:
      - 'auth-postgresql-data:/bitnami/postgresql'
    environment:
      - POSTGRESQL_DATABASE=$AUTH_POSTGRESQL_DATABASE
      - POSTGRESQL_USERNAME=$AUTH_POSTGRESQL_USERNAME
      - POSTGRESQL_PASSWORD=$AUTH_POSTGRESQL_PASSWORD
    healthcheck:
      test: [ 'CMD-SHELL', 'pg_isready --username=$AUTH_POSTGRESQL_USERNAME --dbname=$AUTH_POSTGRESQL_DATABASE' ]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s

  auth-redis:
    image: 'bitnami/redis:7.4.2-debian-12-r0'
    networks:
      - movies-network
    volumes:
      - 'auth-redis-data:/bitnami/redis/data'
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
    command: [ '/opt/bitnami/scripts/redis/run.sh', '--maxmemory', '${AUTH_REDIS_MAXMEMORY:-200mb}' ]
    healthcheck:
      test: [ 'CMD', '/bin/bash', '-c', '[[ $(redis-cli ping) == "PONG" ]]' ]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 10s

  mongodb:
    image: mongo:8.0.5
    networks:
      - movies-network
    volumes:
      - "mongodb:/etc/mongodb/data"
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')" ]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s

  ugc-mongo-service:
    build:
      context: ./compose/ugc_mongo/
      dockerfile: Dockerfile
    environment:
      - PYTHONPATH=/opt/app
      - MONGO_HOST=mongodb
      - MONGO_PORT=27017
      - MONGO_DB=ugc_mongo
    networks:
      - movies-network
    depends_on:
      mongodb:
        condition: service_healthy

  notifications-queue-service:
    build:
      context: ./compose/notifications/queue
    depends_on:
      notifications-queue-worker:
        condition: service_started
      notifications-queue-worker-undelivered-messages:
        condition: service_started
    networks:
      - movies-network
    environment:
      - NOTIFICATIONS_ADMIN_PANEL_HOST=notification-admin-panel-service
      - NOTIFICATIONS_ADMIN_PANEL_PORT=8000
      - AUTH_HOST=auth-service
      - AUTH_PORT=8000
      - AUTH_SUPERUSER_LOGIN=$AUTH_SUPERUSER_LOGIN
      - AUTH_SUPERUSER_PASSWORD=$AUTH_SUPERUSER_PASSWORD
      - RABBITMQ_HOST=notifications-queue-rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USERNAME=$NOTIFICATIONS_QUEUE_RABBITMQ_USERNAME
      - RABBITMQ_PASSWORD=$NOTIFICATIONS_QUEUE_RABBITMQ_PASSWORD
      - REDIS_HOST=notifications-queue-redis
      - REDIS_PORT=6379
      - SMTP_HOST=mailhog
      - SMTP_PORT=1025
      - SMTP_USERNAME=$SMTP_USERNAME
      - SMTP_PASSWORD=$SMTP_PASSWORD
      - SMTP_USE_TLS=false
      - EMAIL_FROM_EMAIL=$EMAIL_FROM_EMAIL
      - DLQ_RABBITMQ_QUEUE_NAME=$DLQ_RABBITMQ_QUEUE_NAME
    restart: unless-stopped
    healthcheck:
      test: [ 'CMD-SHELL', 'curl -s http://localhost:8000/api/_health' ]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 10s
    develop:
      watch:
        - action: sync
          path: ./compose/notifications/queue/notifications_queue
          target: /opt/app/notifications_queue
        - action: rebuild
          path: ./compose/notifications/queue/commands
        - action: rebuild
          path: ./compose/notifications/queue/pyproject.toml
        - action: rebuild
          path: ./compose/notifications/queue/poetry.lock

  notifications-queue-worker:
    build:
      context: ./compose/notifications/queue
    depends_on:
      auth-service:
        condition: service_healthy
      notifications-queue-rabbitmq:
        condition: service_healthy
      notifications-queue-redis:
        condition: service_healthy
    networks:
      - movies-network
    environment:
      - TASKIQ_RELOAD=true
      - NOTIFICATIONS_ADMIN_PANEL_HOST=notification-admin-panel-service
      - NOTIFICATIONS_ADMIN_PANEL_PORT=8000
      - AUTH_HOST=auth-service
      - AUTH_PORT=8000
      - AUTH_SUPERUSER_LOGIN=$AUTH_SUPERUSER_LOGIN
      - AUTH_SUPERUSER_PASSWORD=$AUTH_SUPERUSER_PASSWORD
      - RABBITMQ_HOST=notifications-queue-rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USERNAME=$NOTIFICATIONS_QUEUE_RABBITMQ_USERNAME
      - RABBITMQ_PASSWORD=$NOTIFICATIONS_QUEUE_RABBITMQ_PASSWORD
      - REDIS_HOST=notifications-queue-redis
      - REDIS_PORT=6379
      - SMTP_HOST=mailhog
      - SMTP_PORT=1025
      - SMTP_USERNAME=$SMTP_USERNAME
      - SMTP_PASSWORD=$SMTP_PASSWORD
      - SMTP_USE_TLS=false
      - EMAIL_FROM_EMAIL=$EMAIL_FROM_EMAIL
      - DLQ_RABBITMQ_QUEUE_NAME=$DLQ_RABBITMQ_QUEUE_NAME
    command: [ '/opt/app/commands/worker.sh' ]
    restart: unless-stopped
    develop:
      watch:
        - action: sync
          path: ./compose/notifications/queue/notifications_queue
          target: /opt/app/notifications_queue
        - action: rebuild
          path: ./compose/notifications/queue/commands
        - action: rebuild
          path: ./compose/notifications/queue/pyproject.toml
        - action: rebuild
          path: ./compose/notifications/queue/poetry.lock

  notifications-queue-worker-undelivered-messages:
    build:
      context: ./compose/notifications/queue
    depends_on:
      auth-service:
        condition: service_healthy
      notifications-queue-rabbitmq:
        condition: service_healthy
      notifications-queue-redis:
        condition: service_healthy
    networks:
      - movies-network
    environment:
      - TASKIQ_BROKER_NAME=undelivered_messages_broker
      - TASKIQ_RELOAD=true
      - NOTIFICATIONS_ADMIN_PANEL_HOST=notification-admin-panel-service
      - NOTIFICATIONS_ADMIN_PANEL_PORT=8000
      - AUTH_HOST=auth-service
      - AUTH_PORT=8000
      - AUTH_SUPERUSER_LOGIN=$AUTH_SUPERUSER_LOGIN
      - AUTH_SUPERUSER_PASSWORD=$AUTH_SUPERUSER_PASSWORD
      - RABBITMQ_HOST=notifications-queue-rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USERNAME=$NOTIFICATIONS_QUEUE_RABBITMQ_USERNAME
      - RABBITMQ_PASSWORD=$NOTIFICATIONS_QUEUE_RABBITMQ_PASSWORD
      - REDIS_HOST=notifications-queue-redis
      - REDIS_PORT=6379
      - SMTP_HOST=mailhog
      - SMTP_PORT=1025
      - SMTP_USERNAME=$SMTP_USERNAME
      - SMTP_PASSWORD=$SMTP_PASSWORD
      - SMTP_USE_TLS=false
      - EMAIL_FROM_EMAIL=$EMAIL_FROM_EMAIL
      - DLQ_RABBITMQ_QUEUE_NAME=$DLQ_RABBITMQ_QUEUE_NAME
    command: [ '/opt/app/commands/worker.sh' ]
    restart: unless-stopped
    develop:
      watch:
        - action: sync
          path: ./compose/notifications/queue/notifications_queue
          target: /opt/app/notifications_queue
        - action: rebuild
          path: ./compose/notifications/queue/commands
        - action: rebuild
          path: ./compose/notifications/queue/pyproject.toml
        - action: rebuild
          path: ./compose/notifications/queue/poetry.lock

  notifications-queue-rabbitmq:
    image: 'bitnami/rabbitmq:4.0.7-debian-12-r1'
    networks:
      - movies-network
    volumes:
      - 'notifications-queue-rabbitmq-data:/bitnami/rabbitmq/mnesia'
    environment:
      - RABBITMQ_USERNAME=$NOTIFICATIONS_QUEUE_RABBITMQ_USERNAME
      - RABBITMQ_PASSWORD=$NOTIFICATIONS_QUEUE_RABBITMQ_PASSWORD
      - RABBITMQ_LOGS=-
      - RABBITMQ_MANAGEMENT_ALLOW_WEB_ACCESS=true
    restart: unless-stopped
    healthcheck:
      test: [ 'CMD-SHELL', 'rabbitmq-diagnostics -q ping' ]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 60s

  notifications-queue-redis:
    image: 'bitnami/redis:7.4.2-debian-12-r0'
    networks:
      - movies-network
    volumes:
      - 'notifications-queue-redis-data:/bitnami/redis/data'
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
    command: [ '/opt/bitnami/scripts/redis/run.sh', '--maxmemory', '${NOTIFICATIONS_QUEUE_REDIS_MAXMEMORY:-200mb}' ]
    restart: unless-stopped
    healthcheck:
      test: [ 'CMD', '/bin/bash', '-c', '[[ $(redis-cli ping) == "PONG" ]]' ]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 10s

  notification-service:
    build:
      context: ./compose/notifications/notification
    networks:
      - movies-network
    environment:
      - QUEUE_HOST=notifications-queue-service
      - QUEUE_PORT=8000
    healthcheck:
      test: [ 'CMD-SHELL', 'curl -s http://localhost:8000/api/_health' ]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 10s
    develop:
      watch:
        - action: sync
          path: ./compose/notifications/notification/src
          target: /opt/app/src
        - action: rebuild
          path: ./compose/notifications/notification/commands
        - action: rebuild
          path: ./compose/notifications/notification/pyproject.toml
        - action: rebuild
          path: ./compose/notifications/notification/poetry.lock

  notification-admin-panel-service:
    build:
      context: ./compose/notifications/admin_panel
    depends_on:
      admin-panel-postgresql:
        condition: service_healthy
      notification-admin-panel-init:
        condition: service_completed_successfully
    networks:
      - movies-network
    environment:
      - POSTGRESQL_HOST=admin-panel-postgresql
      - POSTGRESQL_PORT=5432
      - POSTGRESQL_DATABASE=$ADMIN_PANEL_POSTGRESQL_DATABASE
      - POSTGRESQL_USERNAME=$ADMIN_PANEL_POSTGRESQL_USERNAME
      - POSTGRESQL_PASSWORD=$ADMIN_PANEL_POSTGRESQL_PASSWORD
      - REDIS_HOST=admin-panel-redis
      - REDIS_PORT=6379
    healthcheck:
      test: [ 'CMD-SHELL', 'curl -s -H "X-Request-Id: healthcheck" http://localhost:8000/admin_panel/api/_health' ]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 10s
    develop:
      watch:
        - action: sync
          path: ./compose/notifications/admin_panel/admin_panel
          target: /opt/app/src
        - action: rebuild
          path: ./compose/notifications/admin_panel/commands
        - action: rebuild
          path: ./compose/notifications/admin_panel/pyproject.toml
        - action: rebuild
          path: ./compose/notifications/admin_panel/poetry.lock

  notification-admin-panel-init:
    build:
      context: ./compose/notifications/admin_panel
    depends_on:
      admin-panel-postgresql:
        condition: service_healthy
    networks:
      - movies-network
    environment:
      - POSTGRESQL_HOST=admin-panel-postgresql
      - POSTGRESQL_PORT=5432
      - POSTGRESQL_DATABASE=$ADMIN_PANEL_POSTGRESQL_DATABASE
      - POSTGRESQL_USERNAME=$ADMIN_PANEL_POSTGRESQL_USERNAME
      - POSTGRESQL_PASSWORD=$ADMIN_PANEL_POSTGRESQL_PASSWORD
      - REDIS_HOST=admin-panel-redis
      - REDIS_PORT=6379
    command: [ '/opt/app/commands/init.sh' ]

  admin-panel-postgresql:
    image: 'bitnami/postgresql:17.2.0-debian-12-r5'
    networks:
      - movies-network
    volumes:
      - 'admin-panel-postgresql-data:/bitnami/postgresql'
    environment:
      - POSTGRESQL_DATABASE=$ADMIN_PANEL_POSTGRESQL_DATABASE
      - POSTGRESQL_USERNAME=$ADMIN_PANEL_POSTGRESQL_USERNAME
      - POSTGRESQL_PASSWORD=$ADMIN_PANEL_POSTGRESQL_PASSWORD
    restart: unless-stopped
    healthcheck:
      test: [ 'CMD-SHELL', 'pg_isready --username=$ADMIN_PANEL_POSTGRESQL_USERNAME --dbname=$ADMIN_PANEL_POSTGRESQL_DATABASE' ]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s

  admin-panel-redis:
    image: 'bitnami/redis:7.4.2-debian-12-r0'
    networks:
      - movies-network
    volumes:
      - 'admin-panel-redis-data:/bitnami/redis/data'
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
    command: [ '/opt/bitnami/scripts/redis/run.sh', '--maxmemory', '${AUTH_REDIS_MAXMEMORY:-200mb}' ]
    restart: unless-stopped
    healthcheck:
      test: [ 'CMD', '/bin/bash', '-c', '[[ $(redis-cli ping) == "PONG" ]]' ]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 10s

  mailhog:
    image: mailhog/mailhog
    ports:
      - '1025:1025'
      - '8025:8025'
    networks:
      - movies-network

networks:
  movies-network:

volumes:
  redis-data:
  elasticsearch-data:
  auth-postgresql-data:
  auth-redis-data:
  mongodb:
  notifications-queue-rabbitmq-data:
  notifications-queue-redis-data:
  admin-panel-postgresql-data:
  admin-panel-redis-data:
