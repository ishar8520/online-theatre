services:
  nginx:
    build:
      context: ./compose/nginx
    depends_on:
      movies:
        condition: service_healthy
      auth-service:
        condition: service_healthy
      logstash:
        condition: service_healthy
    ports:
      - '8000:8080'
    networks:
      - movies-network
    volumes:
      - nginx_logs_data:/opt/bitnami/nginx/logs/

  movies:
    build:
      context: ./src
    depends_on:
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      auth-service:
        condition: service_healthy
      jaeger:
        condition: service_healthy
    networks:
      - movies-network
    environment:
      - PROJECT_NAME=$PROJECT_NAME
      - GUNICORN_WORKERS=${GUNICORN_WORKERS:-}
      - AUTH_HOST=auth-service
      - AUTH_PORT=8000
      - OTEL_ENABLED=${OTEL_ENABLED:-True}
      - OTEL_REQUEST_ID_REQUIRED=${OTEL_REQUEST_ID_REQUIRED:-True}
      - OTEL_EXPORTER_OTLP_HTTP_ENDPOINT=http://jaeger:4318/v1/traces
      - OTEL_SERVICE_NAME=${OTEL_SERVICE_NAME:-movies}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - ELASTIC_HOST=elasticsearch
      - ELASTIC_PORT=9200
      - SENTRY_ENABLE_SDK=${SENTRY_ENABLE_SDK}
      - SENTRY_ENABLE_TRACING=${SENTRY_ENABLE_TRACING}
      - SENTRY_DSN=${SENTRY_DSN}
      - SENTRY_TRACES_SAMPLE_RATE=${SENTRY_TRACES_SAMPLE_RATE}
      - SENTRY_PROFILES_SAMPLE_RATE=${SENTRY_PROFILES_SAMPLE_RATE}
    command: [ '/opt/app/commands/gunicorn.sh' ]
    healthcheck:
      test: [ 'CMD-SHELL', 'curl -s -H "X-Request-Id: healthcheck" http://localhost:8000/api/_health' ]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 10s

  redis:
    image: 'bitnami/redis:7.4.2-debian-12-r0'
    networks:
      - movies-network
    volumes:
      - 'redis-data:/bitnami/redis/data'
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
    command: [ '/opt/bitnami/scripts/redis/run.sh', '--maxmemory', '${REDIS_MAXMEMORY:-200mb}' ]
    healthcheck:
      test: [ 'CMD', '/bin/bash', '-c', '[[ $(redis-cli ping) == "PONG" ]]' ]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 10s

  elasticsearch:
    image: 'bitnami/elasticsearch:8.16.1-debian-12-r1'
    networks:
      - movies-network
    volumes:
      - 'elasticsearch-data:/bitnami/elasticsearch/data'
    environment:
      - ELASTICSEARCH_HEAP_SIZE=${ELASTICSEARCH_HEAP_SIZE:-200m}
    restart: unless-stopped
    healthcheck:
      test: [ 'CMD-SHELL', '/opt/bitnami/scripts/elasticsearch/healthcheck.sh' ]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 60s

  etl:
    build:
      context: ./compose/etl
    depends_on:
      postgresql:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    networks:
      - movies-network
    volumes:
      - 'etl-data:/opt/app/data'
      - 'etl-logs:/opt/app/logs'
    environment:
      - POSTGRESQL_HOST=postgresql
      - POSTGRESQL_PORT=5432
      - POSTGRESQL_DATABASE=$POSTGRESQL_DATABASE
      - POSTGRESQL_USERNAME=$POSTGRESQL_USERNAME
      - POSTGRESQL_PASSWORD=$POSTGRESQL_PASSWORD
      - ELASTIC_HOST=elasticsearch
      - ELASTIC_PORT=9200
    restart: unless-stopped

  postgresql:
    image: 'bitnami/postgresql:17.2.0-debian-12-r5'
    networks:
      - movies-network
    volumes:
      - 'postgresql-data:/bitnami/postgresql'
      - './compose/postgresql/database_dump.sql:/docker-entrypoint-initdb.d/init.sql'
    environment:
      - POSTGRESQL_DATABASE=$POSTGRESQL_DATABASE
      - POSTGRESQL_USERNAME=$POSTGRESQL_USERNAME
      - POSTGRESQL_PASSWORD=$POSTGRESQL_PASSWORD
    restart: unless-stopped
    healthcheck:
      test: [ 'CMD-SHELL', 'pg_isready --username=$POSTGRESQL_USERNAME --dbname=$POSTGRESQL_DATABASE' ]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s

  auth-service:
    build:
      context: ./compose/auth
    depends_on:
      auth-postgresql:
        condition: service_healthy
      auth-redis:
        condition: service_healthy
      auth-service-init:
        condition: service_completed_successfully
      jaeger:
        condition: service_healthy
    networks:
      - movies-network
    environment:
      - GUNICORN_WORKERS=${AUTH_GUNICORN_WORKERS:-}
      - AUTH_SECRET_KEY=$AUTH_SECRET_KEY
      - AUTH_ACCESS_JWT_LIFETIME=${AUTH_ACCESS_JWT_LIFETIME:-3600}
      - AUTH_REFRESH_JWT_LIFETIME=${AUTH_REFRESH_JWT_LIFETIME:-86400}
      - AUTH_SQL_ECHO=${AUTH_SQL_ECHO:-False}
      - OAUTH_GOOGLE_CLIENT_ID=${AUTH_OAUTH_GOOGLE_CLIENT_ID:-}
      - OAUTH_GOOGLE_CLIENT_SECRET=${AUTH_OAUTH_GOOGLE_CLIENT_SECRET:-}
      - OTEL_ENABLED=${OTEL_ENABLED:-True}
      - OTEL_REQUEST_ID_REQUIRED=${OTEL_REQUEST_ID_REQUIRED:-True}
      - OTEL_EXPORTER_OTLP_HTTP_ENDPOINT=http://jaeger:4318/v1/traces
      - OTEL_SERVICE_NAME=${AUTH_OTEL_SERVICE_NAME:-auth}
      - SUPERUSER_LOGIN=$AUTH_SUPERUSER_LOGIN
      - SUPERUSER_PASSWORD=$AUTH_SUPERUSER_PASSWORD
      - POSTGRESQL_HOST=auth-postgresql
      - POSTGRESQL_PORT=5432
      - POSTGRESQL_DATABASE=$AUTH_POSTGRESQL_DATABASE
      - POSTGRESQL_USERNAME=$AUTH_POSTGRESQL_USERNAME
      - POSTGRESQL_PASSWORD=$AUTH_POSTGRESQL_PASSWORD
      - REDIS_HOST=auth-redis
      - REDIS_PORT=6379
      - RATELIMITER_TIMES=$RATELIMITER_TIMES
      - RATELIMITER_SECONDS=$RATELIMITER_SECONDS
      - SENTRY_ENABLE_SDK=${SENTRY_ENABLE_SDK}
      - SENTRY_ENABLE_TRACING=${SENTRY_ENABLE_TRACING}
      - SENTRY_DSN=${SENTRY_DSN}
      - SENTRY_TRACES_SAMPLE_RATE=${SENTRY_TRACES_SAMPLE_RATE}
      - SENTRY_PROFILES_SAMPLE_RATE=${SENTRY_PROFILES_SAMPLE_RATE}
    command: [ '/opt/app/commands/gunicorn.sh' ]
    restart: unless-stopped
    healthcheck:
      test: [ 'CMD-SHELL', 'curl -s -H "X-Request-Id: healthcheck" http://localhost:8000/auth/api/_health' ]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 10s

  auth-service-init:
    build:
      context: ./compose/auth
    depends_on:
      auth-postgresql:
        condition: service_healthy
      auth-redis:
        condition: service_healthy
      jaeger:
        condition: service_healthy
    networks:
      - movies-network
    environment:
      - AUTH_SECRET_KEY=$AUTH_SECRET_KEY
      - AUTH_ACCESS_JWT_LIFETIME=${AUTH_ACCESS_JWT_LIFETIME:-3600}
      - AUTH_REFRESH_JWT_LIFETIME=${AUTH_REFRESH_JWT_LIFETIME:-86400}
      - AUTH_SQL_ECHO=${AUTH_SQL_ECHO:-False}
      - OTEL_ENABLED=${OTEL_ENABLED:-True}
      - OTEL_REQUEST_ID_REQUIRED=${OTEL_REQUEST_ID_REQUIRED:-True}
      - OTEL_EXPORTER_OTLP_HTTP_ENDPOINT=http://jaeger:4318/v1/traces
      - OTEL_SERVICE_NAME=${AUTH_OTEL_SERVICE_NAME:-auth}
      - SUPERUSER_LOGIN=$AUTH_SUPERUSER_LOGIN
      - SUPERUSER_PASSWORD=$AUTH_SUPERUSER_PASSWORD
      - POSTGRESQL_HOST=auth-postgresql
      - POSTGRESQL_PORT=5432
      - POSTGRESQL_DATABASE=$AUTH_POSTGRESQL_DATABASE
      - POSTGRESQL_USERNAME=$AUTH_POSTGRESQL_USERNAME
      - POSTGRESQL_PASSWORD=$AUTH_POSTGRESQL_PASSWORD
      - REDIS_HOST=auth-redis
      - REDIS_PORT=6379
    command: [ '/opt/app/commands/init.sh' ]

  auth-postgresql:
    image: 'bitnami/postgresql:17.2.0-debian-12-r5'
    networks:
      - movies-network
    volumes:
      - 'auth-postgresql-data:/bitnami/postgresql'
    environment:
      - POSTGRESQL_DATABASE=$AUTH_POSTGRESQL_DATABASE
      - POSTGRESQL_USERNAME=$AUTH_POSTGRESQL_USERNAME
      - POSTGRESQL_PASSWORD=$AUTH_POSTGRESQL_PASSWORD
    restart: unless-stopped
    healthcheck:
      test: [ 'CMD-SHELL', 'pg_isready --username=$AUTH_POSTGRESQL_USERNAME --dbname=$AUTH_POSTGRESQL_DATABASE' ]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s

  auth-redis:
    image: 'bitnami/redis:7.4.2-debian-12-r0'
    networks:
      - movies-network
    volumes:
      - 'auth-redis-data:/bitnami/redis/data'
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
    command: [ '/opt/bitnami/scripts/redis/run.sh', '--maxmemory', '${AUTH_REDIS_MAXMEMORY:-200mb}' ]
    restart: unless-stopped
    healthcheck:
      test: [ 'CMD', '/bin/bash', '-c', '[[ $(redis-cli ping) == "PONG" ]]' ]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 10s

  jaeger:
    image: 'jaegertracing/jaeger:2.2.0'
    ports:
      - '16686:16686'
    networks:
      - movies-network
    healthcheck:
      test: [ 'CMD-SHELL', 'wget -q --spider http://localhost:16686' ]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 10s

  kafka-0:
    build:
      context: ./compose/ugc/kafka
    environment:
      - KAFKA_TOPIC=${KAFKA_TOPIC}
      - KAFKA_HOSTS=${KAFKA_HOSTS}
      - KAFKA_ENABLE_KRAFT=${KAFKA_ENABLE_KRAFT}
      - KAFKA_CFG_PROCESS_ROLES=${KAFKA_CFG_PROCESS_ROLES}
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=${KAFKA_CFG_CONTROLLER_LISTENER_NAMES}
      - ALLOW_PLAINTEXT_LISTENER=${ALLOW_PLAINTEXT_LISTENER}
      - KAFKA_CFG_NODE_ID=${KAFKA_CFG_NODE_ID_0}
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=${KAFKA_CFG_CONTROLLER_QUORUM_VOTERS_0}
      - KAFKA_KRAFT_CLUSTER_ID=${KAFKA_KRAFT_CLUSTER_ID}
      - KAFKA_CFG_LISTENERS=${KAFKA_CFG_LISTENERS_0}
      - KAFKA_CFG_ADVERTISED_LISTENERS=${KAFKA_CFG_ADVERTISED_LISTENERS_0}
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=${KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP}
    volumes:
      - kafka-0_data:/bitnami/kafka
    networks:
      - movies-network
    healthcheck:
      test: [ "CMD-SHELL", "kafka-topics.sh --list --bootstrap-server kafka-0:9092" ]
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 30s

  kafka-ui:
    image: provectuslabs/kafka-ui:v0.7.2
    ports:
      - "9090:8080"
    environment:
      - KAFKA_CLUSTERS_0_BOOTSTRAP_SERVERS=${KAFKA_CLUSTERS_0_BOOTSTRAP_SERVERS}
      - KAFKA_CLUSTERS_0_NAME=${KAFKA_CLUSTERS_0_NAME}
    networks:
      - movies-network

  ugc-service:
    build:
      context: ./compose/ugc/ugc
      dockerfile: Dockerfile
    environment:
      - PYTHONPATH=/opt/app
      - SENTRY_ENABLE_SDK=${SENTRY_ENABLE_SDK}
      - SENTRY_ENABLE_TRACING=${SENTRY_ENABLE_TRACING}
      - SENTRY_DSN=${SENTRY_DSN}
      - SENTRY_TRACES_SAMPLE_RATE=${SENTRY_TRACES_SAMPLE_RATE}
      - SENTRY_PROFILES_SAMPLE_RATE=${SENTRY_PROFILES_SAMPLE_RATE}
    networks:
      - movies-network
    depends_on:
      kafka-0:
        condition: service_healthy

  clickhouse-node:
    image: clickhouse/clickhouse-server:23
    hostname: clickhouse-node
    ports:
      - "8123:8123"
      - "9000:9000"
    networks:
      - movies-network
    volumes:
      - 'clickhouse-node:/etc/clickhouse-server'
      - './compose/clickhouse/create_tables.sql:/docker-entrypoint-initdb.d/init.sql'
    healthcheck:
      test: 'wget --no-verbose --tries=1 --spider http://localhost:8123/ping || exit 1'
      interval: 5s
      timeout: 3s
      retries: 5

  etl-k2ch:
    build:
      context: ./compose/etl_k2ch
    depends_on:
      kafka-0:
        condition: service_healthy
      clickhouse-node:
        condition: service_healthy
    networks:
      - movies-network
    environment:
      - KAFKA_HOST=kafka-0:9092
      - CLICKHOUSE_HOST=clickhouse-node
    restart: unless-stopped

  elk-elastic:
    image: 'bitnami/elasticsearch:8.16.1-debian-12-r1'
    networks:
      - movies-network
    environment:
      - ELASTICSEARCH_HEAP_SIZE=${ELASTICSEARCH_HEAP_SIZE:-200m}
      - discovery.type=single-node
    healthcheck:
      test: [ 'CMD-SHELL', '/opt/bitnami/scripts/elasticsearch/healthcheck.sh' ]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s

  logstash:
    image: logstash:8.10.2
    networks:
      - movies-network
    depends_on:
      elk-elastic:
        condition: service_healthy
    environment:
      XPACK_MONITORING_ENABLED: "false"
      ES_HOST: "elk-elastic:9200"
    volumes:
      - ./compose/elk/logstash.conf:/config/logstash.conf:ro
      - nginx_logs_data:/opt/logs/nginx/:ro
    command: logstash -f /config/logstash.conf
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9600" ]
      interval: 10s
      retries: 5
      start_period: 30s

  kibana:
    image: kibana:8.10.2
    networks:
      - movies-network
    depends_on:
      elk-elastic:
        condition: service_healthy
    environment:
      - ELASTICSEARCH_HOSTS=http://elk-elastic:9200
      - SERVER_BASEPATH=/kibana
      - SERVER_REWRITE_BASEPATH=true

  mongodb:
    image: mongo:8.0.5
    networks:
      - movies-network
    ports:
      - "27017:27017"
    volumes:
      - "mongodb:/etc/mongodb/data"
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')" ]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s

  ugc-mongo-service:
    build:
      context: ./compose/ugc_mongo/
      dockerfile: Dockerfile
    environment:
      - PYTHONPATH=/opt/app
      - MONGO_HOST=mongodb
      - MONGO_PORT=27017
      - MONGO_DB=ugc_mongo
    networks:
      - movies-network
    depends_on:
      mongodb:
        condition: service_healthy

  notifications-queue-service:
    build:
      context: ./compose/notifications/queue
    networks:
      - movies-network
    environment:
      - GUNICORN_WORKERS=${NOTIFICATIONS_QUEUE_GUNICORN_WORKERS:-}
    command: [ '/opt/app/commands/gunicorn.sh' ]
    healthcheck:
      test: [ 'CMD-SHELL', 'curl -s http://localhost:8000/api/_health' ]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 10s

networks:
  movies-network:

volumes:
  redis-data:
  elasticsearch-data:
  etl-data:
  etl-logs:
  postgresql-data:
  auth-postgresql-data:
  auth-redis-data:
  kafka-0_data:
  clickhouse-node:
  nginx_logs_data:
  mongodb:
