"""Fix migrations

Revision ID: 43c1184f96fa
Revises: 198a9266168f
Create Date: 2025-01-30 00:18:35.956599

"""
from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '43c1184f96fa'
down_revision: Union[str, None] = '198a9266168f'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    op.alter_column(
        'login_history',
        'user_id',
        existing_type=sa.UUID(),
        nullable=False,
        schema='auth',
    )
    op.alter_column(
        'login_history',
        'user_agent',
        existing_type=sa.TEXT(),
        nullable=False,
        schema='auth',
    )
    op.alter_column(
        'login_history',
        'created',
        existing_type=postgresql.TIMESTAMP(timezone=True),
        nullable=False,
        schema='auth',
    )
    op.drop_constraint(
        'login_history_user_id_fkey',
        'login_history',
        type_='foreignkey',
        schema='auth',
    )
    op.create_foreign_key(
        op.f('fk_login_history_user_id_user'),
        'login_history',
        'user',
        ['user_id'],
        ['id'],
        source_schema='auth',
        referent_schema='auth',
    )
    op.alter_column(
        'role',
        'name',
        existing_type=sa.TEXT(),
        nullable=False,
        schema='auth',
    )
    op.alter_column(
        'role',
        'code',
        existing_type=sa.TEXT(),
        nullable=False,
        schema='auth',
    )
    op.alter_column(
        'role',
        'created',
        existing_type=postgresql.TIMESTAMP(timezone=True),
        nullable=False,
        schema='auth',
    )
    op.alter_column(
        'role',
        'modified',
        existing_type=postgresql.TIMESTAMP(timezone=True),
        nullable=False,
        schema='auth',
    )
    op.drop_constraint(
        'role_code_key',
        'role',
        type_='unique',
        schema='auth',
    )
    op.create_unique_constraint(
        op.f('uq_role_code'),
        'role',
        ['code'],
        schema='auth',
    )
    op.alter_column(
        'user',
        'login',
        existing_type=sa.TEXT(),
        nullable=False,
        schema='auth',
    )
    op.alter_column(
        'user',
        'password',
        existing_type=sa.TEXT(),
        nullable=False,
        schema='auth',
    )
    op.alter_column(
        'user',
        'is_superuser',
        existing_type=sa.BOOLEAN(),
        nullable=False,
        schema='auth',
    )
    op.alter_column(
        'user',
        'created',
        existing_type=postgresql.TIMESTAMP(timezone=True),
        nullable=False,
        schema='auth',
    )
    op.alter_column(
        'user',
        'modified',
        existing_type=postgresql.TIMESTAMP(timezone=True),
        nullable=False,
        schema='auth',
    )
    op.drop_constraint(
        'user_login_key',
        'user',
        type_='unique',
        schema='auth',
    )
    op.create_unique_constraint(
        op.f('uq_user_login'),
        'user',
        ['login'],
        schema='auth',
    )
    op.alter_column(
        'user_role',
        'user_id',
        existing_type=sa.UUID(),
        nullable=False,
        schema='auth',
    )
    op.alter_column(
        'user_role',
        'role_id',
        existing_type=sa.UUID(),
        nullable=False,
        schema='auth',
    )
    op.alter_column(
        'user_role',
        'created',
        existing_type=postgresql.TIMESTAMP(timezone=True),
        nullable=False,
        schema='auth',
    )
    op.drop_constraint(
        'user_role_user_id_fkey',
        'user_role',
        type_='foreignkey',
        schema='auth',
    )
    op.drop_constraint(
        'user_role_role_id_fkey',
        'user_role',
        type_='foreignkey',
        schema='auth',
    )
    op.create_foreign_key(
        op.f('fk_user_role_role_id_role'),
        'user_role',
        'role',
        ['role_id'],
        ['id'],
        source_schema='auth',
        referent_schema='auth',
    )
    op.create_foreign_key(
        op.f('fk_user_role_user_id_user'),
        'user_role',
        'user',
        ['user_id'],
        ['id'],
        source_schema='auth',
        referent_schema='auth',
    )


def downgrade() -> None:
    op.drop_constraint(
        op.f('fk_user_role_user_id_user'),
        'user_role',
        type_='foreignkey',
        schema='auth',
    )
    op.drop_constraint(
        op.f('fk_user_role_role_id_role'),
        'user_role',
        type_='foreignkey',
        schema='auth',
    )
    op.create_foreign_key(
        'user_role_role_id_fkey',
        'user_role',
        'role',
        ['role_id'],
        ['id'],
        source_schema='auth',
        referent_schema='auth',
    )
    op.create_foreign_key(
        'user_role_user_id_fkey',
        'user_role',
        'user',
        ['user_id'],
        ['id'],
        source_schema='auth',
        referent_schema='auth',
    )
    op.alter_column(
        'user_role',
        'created',
        existing_type=postgresql.TIMESTAMP(timezone=True),
        nullable=True,
        schema='auth',
    )
    op.alter_column(
        'user_role',
        'role_id',
        existing_type=sa.UUID(),
        nullable=True,
        schema='auth',
    )
    op.alter_column(
        'user_role',
        'user_id',
        existing_type=sa.UUID(),
        nullable=True,
        schema='auth',
    )
    op.drop_constraint(
        op.f('uq_user_login'),
        'user',
        type_='unique',
        schema='auth',
    )
    op.create_unique_constraint(
        'user_login_key',
        'user',
        ['login'],
        schema='auth',
    )
    op.alter_column(
        'user',
        'modified',
        existing_type=postgresql.TIMESTAMP(timezone=True),
        nullable=True,
        schema='auth',
    )
    op.alter_column(
        'user',
        'created',
        existing_type=postgresql.TIMESTAMP(timezone=True),
        nullable=True,
        schema='auth',
    )
    op.alter_column(
        'user',
        'is_superuser',
        existing_type=sa.BOOLEAN(),
        nullable=True,
        schema='auth',
    )
    op.alter_column(
        'user',
        'password',
        existing_type=sa.TEXT(),
        nullable=True,
        schema='auth',
    )
    op.alter_column(
        'user',
        'login',
        existing_type=sa.TEXT(),
        nullable=True,
        schema='auth',
    )
    op.drop_constraint(
        op.f('uq_role_code'),
        'role',
        type_='unique',
        schema='auth',
    )
    op.create_unique_constraint(
        'role_code_key',
        'role',
        ['code'],
        schema='auth',
    )
    op.alter_column(
        'role',
        'modified',
        existing_type=postgresql.TIMESTAMP(timezone=True),
        nullable=True,
        schema='auth',
    )
    op.alter_column(
        'role',
        'created',
        existing_type=postgresql.TIMESTAMP(timezone=True),
        nullable=True,
        schema='auth',
    )
    op.alter_column(
        'role',
        'code',
        existing_type=sa.TEXT(),
        nullable=True,
        schema='auth',
    )
    op.alter_column(
        'role',
        'name',
        existing_type=sa.TEXT(),
        nullable=True,
        schema='auth',
    )
    op.drop_constraint(
        op.f('fk_login_history_user_id_user'),
        'login_history',
        type_='foreignkey',
        schema='auth',
    )
    op.create_foreign_key(
        'login_history_user_id_fkey',
        'login_history',
        'user',
        ['user_id'],
        ['id'],
        source_schema='auth',
        referent_schema='auth',
    )
    op.alter_column(
        'login_history',
        'created',
        existing_type=postgresql.TIMESTAMP(timezone=True),
        nullable=True,
        schema='auth',
    )
    op.alter_column(
        'login_history',
        'user_agent',
        existing_type=sa.TEXT(),
        nullable=True,
        schema='auth',
    )
    op.alter_column(
        'login_history',
        'user_id',
        existing_type=sa.UUID(),
        nullable=True,
        schema='auth',
    )
